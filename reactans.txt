1.Basic linux Commands 
# who - Display users currently logged in 
who 
# date - Display current date and time 
date 
# cal - Display a calendar for the current month 
cal 
# echo - Display a string 
echo "Hello, World!" 
# man - Display manual for a command 
man ls 
# clear - Clear the screen 
clear 
# pwd - Display the current directory 
pwd 
# bc - Basic calculator 
echo "10 + 20" | bc 
# ls - List files in a directory 
ls /home# mkdir - Create a new directory 
mkdir new_directory 
# rmdir - Remove a directory 
rmdir new_directory 
# cd - Change directory 
cd /home 
# cat - Display contents of a file 
cat filename.txt 
# more - Display contents one page at a time 
more filename.txt 
# wc - Count lines, words, and characters in a file 
wc filename.txt 
# mv - Rename or move a file 
mv oldname.txt newname.txt 
# cp - Copy a file 
cp filename.txt new_filename.txt 
# chmod - Change file permissions 
chmod 755 filename.txt
END 

2.Shell Programming 
1. Greatest of Three Numbers 
bash 
Copy code 
echo "Enter three numbers:" 
read a b c 
if [ $a -gt $b ] && [ $a -gt $c ]; then 
echo "$a is the greatest" 
elif [ $b -gt $a ] && [ $b -gt $c ]; then 
echo "$b is the greatest" 
else 
echo "$c is the greatest" 
f
 i 
END

2. Factorial of a Number 
bash 
Copy code 
echo "Enter a number:" 
read n 
fact=1 
for (( i=1; i<=n; i++ )); do 
fact=$((fact * i)) 
done 
echo "Factorial: $fact" 
END

3. Sum of N Numbers 
bash 
Copy code 
echoread n 
sum=0 
for (( i=1; i<=n; i++ )); do 
sum=$((sum + i)) 
done 
echo "Sum: $sum" 
END

4. Odd or Even Number 
bash 
Copy code 
echo "Enter a number:" 
read n 
if (( n % 2 == 0 )); then 
echo "$n is even" 
else 
echo "$n is odd" 
f
 i 
 END
5. Fibonacci Series 
bash 
Copy code 
echo "Enter the number of terms:" 
read n 
a=0 
b=1 
echo "Fibonacci Series:" 
for (( i=0; i<n; i++ )); do 
echo -n "$a " 
fn=$((a + b))a=$b 
b=$fn 
done 
END

6. Multiplication Table 
bash 
Copy code 
echo "Enter a number:" 
read n 
for (( i=1; i<=10; i++ )); do 
echo "$n * $i = $((n * i))" 
done 
END

7. Swapping Two Numbers 
bash 
Copy code 
echo "Enter two numbers:" 
read a b 
echo "Before swapping: a = $a, b = $b" 
temp=$a 
a=$b 
b=$temp 
echo "After swapping: a = $a, b = $b" 
END

8. File Manipulation (Creating a file and writing to it) 
bash 
Copy code 
echo "Enter filename:" 
read filename 
echoread content 
echo "$content" > "$filename" 
echo "Content written to $filename" 
END

9. Palindrome Check 
bash 
Copy code 
echo "Enter a string:" 
read str 
rev=$(echo "$str" | rev) 
if [ "$str" == "$rev" ]; then 
echo "$str is a palindrome" 
else 
echo "$str is not a palindrome" 
f
 i 
 END

10. Positive or Negative Number 
bash 
Copy code 
echo "Enter a number:" 
read n 
if (( n > 0 )); then 
echo "$n is positive" 
elif (( n < 0 )); then 
echo "$n is negative" 
else 
echo "$n is zero" 
f
 i 
 END

11.bash 
Copy code 
echo "Enter a number:" 
read n 
is_prime=1 
for (( i=2; i<=n/2; i++ )); do 
if (( n % i == 0 )); then 
is_prime=0 
break 
f
 i 
done 
if (( is_prime == 1 )); then 
echo "$n is a prime number" 
else 
echo "$n is not a prime number" 
f
 i 
END

12. Area of Different Shapes 
bash 
Copy code 
echo "Choose a shape to find area (1 for Circle, 2 for Rectangle):" 
read choice 
if (( choice == 1 )); then 
echo "Enter radius:" 
read r 
area=$(echo "3.1415 * $r * $r" | bc) 
echo "Area of circle: $area" 
elifecho "Enter length and width:" 
read l w 
area=$((l * w)) 
echo "Area of rectangle: $area" 
else 
echo "Invalid choice" 
f
 i
END

13. Armstrong Number 
bash 
Copy code 
echo "Enter a number:" 
read n 
temp=$n 
sum=0 
while [ $temp -gt 0 ]; do 
digit=$((temp % 10)) 
sum=$((sum + digit ** 3)) 
temp=$((temp / 10)) 
done 
if [ $sum -eq $n ]; then 
echo "$n is an Armstrong number" 
else 
echo "$n is not an Armstrong number" 
f
 i
END

14. Arithmetic Operations 
bash 
Copy codeecho "Enter two numbers:" 
read a b 
echo "Addition: $((a + b))" 
echo "Subtraction: $((a - b))" 
echo "Multiplication: $((a * b))" 
echo "Division: $((a / b))" 
END

EX.NO:3-IMPLEMENTATION OF UNIX SYSTEM CALLS: 
Create(): 
#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <fcntl.h> 
int main(int argc, char *argv[]) { 
if (argc < 2) { 
printf("Usage: %s <filename>\n", argv[0]); 
exit(-1); 
} 
int fd = open(argv[1], O_WRONLY | O_CREAT | O_TRUNC, 0644); 
if (fd < 0) { 
perror("File creation problem"); 
exit(-1); 
} 
printf("Press Ctrl+D at the end in a new line:\n"); 
char buf[1024]; 
ssize_t n; 
while ((n = read(0, buf, sizeof(buf))) > 0) 
write(fd, buf, n); 
close(fd); 
return 0; 
} 
read(): 
#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <fcntl.h> 
int main(int argc, char *argv[]) { 
if (argc < 2) { 
printf("Usage: %s <filename>\n", argv[0]); 
exit(-1); 
} 
int fd = open(argv[1], O_RDONLY); 
if (fd == -1) { 
perror(argv[1]); 
exit(-1); 
} 
char buf[1024]; 
ssize_t n; 
while ((n = read(fd, buf, sizeof(buf))) > 0)write(STDOUT_FILENO, buf, n); 
close(fd); 
return 0; 
} 
write(): 
#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <fcntl.h> 
int main(int argc, char *argv[]) { 
if (argc < 2) { 
printf("Usage: %s <filename>\n", argv[0]); 
exit(-1); 
} 
int fd = open(argv[1], O_APPEND | O_WRONLY | O_CREAT, 0644); 
if (fd < 0) { 
perror(argv[1]); 
exit(-1); 
} 
char buf[1024]; 
ssize_t n; 
while ((n = read(STDIN_FILENO, buf, sizeof(buf))) > 0) 
write(fd, buf, n); 
close(fd); 
return 0; 
} 
C program to illustrate use of fork () & exec () system call: 
#include <stdio.h> 
#include <sys/types.h> 
#include <unistd.h> 
#include <stdlib.h> 
#include <sys/wait.h> 
int main() { 
pid_t pid = fork(); 
if (pid == -1) { 
perror("Fork failed"); 
exit(EXIT_FAILURE); 
} 
if (pid == 0) { 
printf("Child process, pid = %u\nParent of child process, pid = %u\n", getpid(), 
getppid()); 
execv("./program", (char *[]){ "./program", NULL });perror("Exec failed"); 
exit(1); 
} 
printf("Parent of parent process, pid = %u\nParent process, pid = %u\n", getppid(), 
getpid()); 
int status; 
if (waitpid(pid, &status, 0) > 0 && WIFEXITED(status)) { 
printf(WEXITSTATUS(status) == 0 ? "Program execution successful\n" : "Execv failed with 
status %d\n", WEXITSTATUS(status)); 
} else { 
perror("waitpid failed or program didn't terminate normally"); 
} 
return 0; 
END

}EX.NO 4 IMPLEMENTATION OF CPU SCHEDULING ALGORITHMS 
4.1 FCFS ALGORITHM: 
#include <stdio.h> 
int main() 
{ 
int n; 
printf("Enter the number of process : "); 
scanf("%d",&n); 
int bst[n]; 
int wait[n];//trun[n]; 
int trun_time[n]; 
f
 loat avg_wait=0,avg_turn=0; 
for(int i=0;i<n;i++) 
{ 
scanf("%d",&bst[i]); 
} 
wait[0]=0; 
for(int i=1;i<n;i++) 
{ 
wait[i]+=wait[i-1]+bst[i-1]; 
} 
for(int i=0;i<n;i++) 
{ 
trun_time[i]=wait[i]+bst[i]; 
} 
for(int i=0;i<n;i++) 
{ 
avg_wait+=wait[i]; 
avg_turn+=trun_time[i]; 
} 
avg_wait/=n; 
avg_turn/=n; 
printf("Avg wait :%.2f",avg_wait); 
printf("Avg trun :%.2f",avg_turn); 
for(int i=0;i<n;i++) 
{ 
printf("\t%d",wait[i]); 
} 
}
END

4.2 SJF ALGORITHM: 
#include <stdio.h> 
int main() { 
int n; 
printf("Enter the number of processes: "); 
scanf("%d", &n); 
int bt[n], wt[n], tt[n]; 
int pt[n]; 
printf("Enter Burst Times:\n"); 
for (int i = 0; i < n; i++) { 
printf("p%d: ", i + 1); 
scanf("%d", &bt[i]); 
pt[i] = i + 1; 
} 
for (int i = 0; i < n - 1; i++) { 
for (int j = i + 1; j < n; j++) { 
if (bt[i] > bt[j]) { 
int temp = bt[j]; 
bt[j] = bt[i]; 
bt[i] = temp; 
int temp1 = pt[j]; 
pt[j] = pt[i]; 
pt[i] = temp1; 
} 
} 
} 
wt[0] = 0; 
tt[0] = bt[0]; 
for (int i = 1; i < n; i++) { 
wt[i] = tt[i - 1]; 
tt[i] = bt[i] + wt[i]; 
} 
printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n"); 
for (int i = 0; i < n; i++) { 
printf("p%d\t%d\t\t%d\t\t%d\n", pt[i], bt[i], wt[i], tt[i]); 
} 
return 0; 
}
END
4.3 SRTF ALGORITHM: 
#include <stdio.h> 
int main() { 
int n; 
printf("Enter the number of processes: "); 
scanf("%d", &n); 
int bt[n], wt[n], tt[n]; 
int pt[n]; 
printf("Enter Burst Times:\n"); 
for (int i = 0; i < n; i++) { 
printf("p%d: ", i + 1); 
scanf("%d", &bt[i]); 
pt[i] = i + 1; 
} 
for (int i = 0; i < n - 1; i++) { 
for (int j = i + 1; j < n; j++) { 
if (bt[i] > bt[j]) { 
int temp = bt[j]; 
bt[j] = bt[i]; 
bt[i] = temp; 
int temp1 = pt[j]; 
pt[j] = pt[i]; 
pt[i] = temp1; 
} 
} 
} 
wt[0] = 0; 
tt[0] = bt[0]; 
for (int i = 1; i < n; i++) { 
wt[i] = tt[i - 1]; 
tt[i] = bt[i] + wt[i]; 
} 
printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n"); 
for (int i = 0; i < n; i++) { 
printf("p%d\t%d\t\t%d\t\t%d\n", pt[i], bt[i], wt[i], tt[i]); 
} 
return 0; 
}
END

4.4 PRIORITY SCHEDULING ALGORITHM: 
#include <stdio.h> 
struct Process 
{ 
int pri; 
int bst; 
int wait; 
int turn; 
}; 
void calwait(struct Process pro[],int n) 
{ 
pro[0].wait=0; 
for(int i=1;i<n;i++) 
{ 
pro[i].wait=pro[i-1].wait+pro[i-1].bst; 
} 
} 
void calturn(struct Process pro[],int n) 
{ 
for(int i=0;i<n;i++) 
{ 
pro[i].turn=pro[i].wait+pro[i].bst; 
} 
} 
void cal(struct Process pro[],int n) 
{ 
for(int i=0;i<n-1;i++) 
{ 
for(int j=i+1;j<n;j++) 
{ 
if(pro[i].pri>pro[j].pri) 
{ 
struct Process temp=pro[i]; 
pro[i]=pro[j]; 
pro[j]=temp; 
} 
} 
} 
calwait(pro,n); 
calturn(pro,n); 
printf("\nPriority\tBurst\twait\tturn\n"); 
for(int i=0;i<n;i++){ 
printf("%d\t%d\t%d\t%d",pro[i].pri,pro[i].bst,pro[i].wait,pro[i].turn); 
printf("\n"); 
} 
} 
int main() 
{ 
int n; 
printf("Enter the process\n"); 
scanf("%d",&n); 
struct Process pro[n]; 
for(int i=0;i<n;i++) 
{ 
scanf("%d%d",&pro[i].pri,&pro[i].bst); 
} 
cal(pro,n); 
} 
END

4.5 ROUND ROBIN ALGORITHM: 
#include <stdio.h> 
int main() { 
int n, tq, time = 0, remaining; 
printf("Enter number of processes and time quantum: "); 
scanf("%d %d", &n, &tq); 
remaining = n; 
int bt[n], rt[n], wt = 0, tat = 0; 
printf("Enter burst times: "); 
for (int i = 0; i < n; i++) { 
scanf("%d", &bt[i]); 
rt[i] = bt[i]; 
} 
while (remaining > 0) { 
for (int i = 0; i < n; i++) { 
if (rt[i] > 0) { 
int t = (rt[i] > tq) ? tq : rt[i]; 
time += t; 
rt[i] -= t; 
if (rt[i] == 0) { 
remaining--; 
wt += time - bt[i]; 
tat += time; 
} 
} 
} 
} 
printf("\nAverage Waiting Time: %.2f\n", (float)wt / n); 
printf("Average Turnaround Time: %.2f\n", (float)tat / n); 
return 0; 
}
END

EX.NO:5.1-PRODUCER CONSUMER PROBLEM USING SEMAPHORES: 
#include <stdio.h> 
#include <stdlib.h> 
int mutex = 1, full = 0, empty = 3, x = 0; 
void producer(), consumer(); 
int wait(int s) { return --s; } 
int signal(int s) { return ++s; } 
int main() { 
int choice; 
printf("\n1. Producer\n2. Consumer\n3. Exit\n"); 
while (1) { 
printf("\nEnter your choice: "); 
scanf("%d", &choice); 
if (choice == 1) 
(mutex == 1 && empty > 0) ? producer() : printf("Buffer is full!\n"); 
else if (choice == 2) 
(mutex == 1 && full > 0) ? consumer() : printf("Buffer is empty!\n"); 
else if (choice == 3) 
exit(0); 
else 
printf("Invalid choice! Please enter 1, 2, or 3.\n"); 
} 
return 0; 
} 
void producer() { 
mutex = wait(mutex); full = signal(full); empty = wait(empty); 
printf("Producer produces item %d\n", ++x); 
mutex = signal(mutex); 
} 
void consumer() { 
mutex = wait(mutex); full = wait(full); empty = signal(empty); 
printf("Consumer consumes item %d\n", x--); 
mutex = signal(mutex); 
} 
EX.NO:5.2 DINING PHILOSOPHER’S TO DEMONSTRATE PROCESS SYNCHRONIZATION: 
#include <stdio.h> 
#define n 4 
int compltedPhilo = 0, i; 
struct fork { int taken; } ForkAvil[n]; 
struct philosp { int left, right; } Philostatus[n]; 
void goForDinner(int philID) { 
if (Philostatus[philID].left == 10 && Philostatus[philID].right == 10) { 
END

6 IMPLEMENTATION OF BANKERS ALGORITHM: 
#include <stdio.h> 
int main() { 
int Max[10][10], alloc[10][10], need[10][10], avail[10], completed[10], safeSequence[10]; 
int p, r, i, j, process, count = 0; 
printf("Enter the number of processes: "); 
scanf("%d", &p); 
printf("Enter the number of resources: "); 
scanf("%d", &r); 
printf("Enter the Max Matrix for each process:\n"); 
for(i = 0; i < p; i++) { 
printf("For process %d: ", i + 1); 
for(j = 0; j < r; j++) { 
scanf("%d", &Max[i][j]); 
} 
} 
printf("Enter the Allocation Matrix for each process:\n"); 
for(i = 0; i < p; i++) { 
printf("For process %d: ", i + 1); 
for(j = 0; j < r; j++) { 
scanf("%d", &alloc[i][j]); 
} 
} 
printf("Enter the Available Resources: "); 
for(i = 0; i < r; i++) { 
scanf("%d", &avail[i]); 
} 
for(i = 0; i < p; i++) { 
for(j = 0; j < r; j++) { 
need[i][j] = Max[i][j] - alloc[i][j]; 
} 
completed[i] = 0; 
} 
do { 
process = -1; 
for(i = 0; i < p; i++) { 
if(completed[i] == 0) { 
int canExecute = 1; 
for(j = 0; j < r; j++) { 
if(avail[j] < need[i][j]) { 
canExecute = 0; 
break;} 
} 
if(canExecute) { 
process = i; 
break; 
} 
} 
} 
if(process != -1) { 
printf("\nProcess %d runs to completion!", process + 1); 
safeSequence[count++] = process + 1; 
for(j = 0; j < r; j++) { 
avail[j] += alloc[process][j]; 
alloc[process][j] = 0; 
Max[process][j] = 0; 
} 
completed[process] = 1; 
} 
} while(count < p && process != -1); 
if(count == p) { 
printf("\nThe system is in a safe state!!\nSafe Sequence: < "); 
for(i = 0; i < p; i++) { 
printf("%d ", safeSequence[i]); 
} 
printf(">\n"); 
} else { 
printf("\nThe system is in an unsafe state!!\n"); 
} 
return 0; 
}
END

EX.No 7-MEMORY ALLOCATION AND MANAGEMENT TECHNIQUES (BEST FIT, WORST FIT, 
FIRST FIT): 
7.1 FIRST FIT: 
#include <stdio.h> 
int main() 
{ 
int p; 
int b; 
printf("Enter the no of process : "); 
scanf("%d",&p); 
int ps[p]; 
printf("Enter process size : "); 
for(int i=0;i<p;i++) 
{ 
scanf("%d",&ps[i]); 
} 
printf("Enter the no of blocks : "); 
scanf("%d",&b); 
int bs[b]; 
printf("Enter blocks size : "); 
for(int i=0;i<b;i++) 
{ 
scanf("%d",&bs[i]); 
} 
int ind[b]; 
int all[p]; 
for(int i=0;i<p;i++) 
{ 
all[i]=-1; 
} 
for(int i=0;i<b;i++) 
{ 
ind[i]=-1; 
} 
for(int i=0;i<p;i++) 
{ 
for(int j=0;j<b;j++) 
{ 
if(ind[j]==-1) 
{ 
if(ps[i]<=bs[j]) 
{ 
ind[j]=1; 
all[i]=j+1; 
break; 
} 
} 
} 
} 
for(int i=0;i<p;i++) 
{ 
printf("%d ",all[i]); 
} 
}
END

7.2 BEST FIT: 
#include <stdio.h> 
int main() 
{ 
int p; 
int b; 
printf("Enter the no of process : "); 
scanf("%d",&p); 
int ps[p]; 
printf("Enter process size : "); 
for(int i=0;i<p;i++) 
{ 
scanf("%d",&ps[i]); 
} 
printf("Enter the no of blocks : "); 
scanf("%d",&b); 
int bs[b]; 
printf("Enter blocks size : "); 
for(int i=0;i<b;i++) 
{ 
scanf("%d",&bs[i]); 
} 
int ori[b]; 
for(int i=0;i<b;i++) 
{ 
ori[i]=bs[i]; 
} 
int ori_ind[b]; 
for(int i=0;i<b-1;i++) 
{ 
for(int j=i+1;j<b;j++) 
{ 
if(bs[i]>bs[j]) 
{ 
int temp=bs[j]; 
bs[j]=bs[i]; 
bs[i]=temp; 
} 
} 
} 
for(int i=0;i<b;i++) 
{ 
for(int j=0;j<b;j++){ 
if(bs[i]==ori[j]) 
{ 
ori_ind[i]=j+1; 
} 
} 
} 
int ind[b]; 
for(int i=0;i<b;i++) 
{ 
ind[i]=-1; 
} 
int all[p]; 
for(int i=0;i<p;i++) 
{ 
all[i]=-1; 
} 
for(int i=0;i<p;i++) 
{ 
for(int j=0;j<b;j++) 
{ 
if(ind[j]==-1) 
{ 
if(bs[j]>=ps[i]) 
{ 
all[i]=ori_ind[j]; 
ind[j]=1; 
break; 
} 
} 
} 
} 
for(int i=0;i<p;i++) 
{ 
printf("%d ",all[i]); 
} 
}
END

7.3-WORST FIT: 
#include <stdio.h> 
int main() { 
int nblocks, nfiles, i, j, top, temp; 
int frag[10], blocks[10], files[10], block_arr[10] = {0}, file_arr[10]; 
printf("\nMemory Management Scheme - Worst Fit\n"); 
printf("Enter Total Blocks and Files: "); 
scanf("%d%d", &nblocks, &nfiles); 
printf("\nEnter Block Sizes:\n"); 
for (i = 0; i < nblocks; i++) scanf("%d", &blocks[i]); 
printf("Enter File Sizes:\n"); 
for (i = 0; i < nfiles; i++) scanf("%d", &files[i]); 
for (i = 0; i < nfiles; i++) { 
top = -1; 
for (j = 0; j < nblocks; j++) { 
if (!block_arr[j] && (temp = blocks[j] - files[i]) >= 0 && (top == -1 || temp > frag[i])) { 
f
 ile_arr[i] = j; 
frag[i] = temp; 
top = temp; 
} 
} 
block_arr[file_arr[i]] = top != -1; 
frag[i] = (top == -1) ? -1 : frag[i]; 
} 
printf("\nFile No.\tSize\tBlock No.\tSize\tFragment\n"); 
for (i = 0; i < nfiles; i++) { 
if (frag[i] != -1) 
printf("%d\t\t%d\t%d\t\t%d\t\t%d\n", i + 1, files[i], file_arr[i] + 1, blocks[file_arr[i]], 
frag[i]); 
else 
printf("%d\t\t%d\tNot Allocated\n", i + 1, files[i]); 
} 
return 0; 
} 
END

7.4-NEXT FIT: 
#include <stdio.h> 
#define MEMORY_SIZE 100 
int memory[MEMORY_SIZE]; 
int lastAllocatedBlock = -1; 
void allocateMemory(int size) { 
int i; 
for (i = lastAllocatedBlock + 1; i < MEMORY_SIZE; i++){ 
if (memory[i] == 0) 
{ 
memory[i] = size; 
lastAllocatedBlock = i; 
printf("Memory block allocated at index %d\n", i); 
return; 
} 
} 
printf("Insufficient memory available for allocation\n"); 
} 
void freeMemory(int index) 
{ 
if (index >= 0 && index < MEMORY_SIZE) { 
if (memory[index] != 0) 
{ 
memory[index] = 0; 
printf("Memory block at index %d freed\n", index); 
} 
else { 
printf("No memory block allocated at index %d\n", index); 
} 
} 
else { 
printf("Invalid memory block index\n"); 
} 
} 
int main() { 
allocateMemory(30); 
allocateMemory(50); 
freeMemory(0); 
allocateMemory(20); 
return 0; 
}
END
EX.NO: 8 IMPLEMENTATION OF PAGE REPLACEMENT ALGORITHMS 
8.1-FIFO PAGE REPLACEMENT: 
#include <stdio.h> 
int main() 
{ 
int frames; 
int pages; 
printf("Enter no of frames : \n"); 
scanf("%d",&frames); 
printf("Enter no of pages : \n"); 
scanf("%d",&pages); 
int ind=0; 
int pf=0; 
int f[frames],p[pages]; 
for(int i=0;i<pages;i++) 
{ 
scanf("%d",&p[i]); 
} 
for(int i=0;i<frames;i++) 
{ 
f[i]=-1; 
} 
printf("\npage\tframes\n"); 
for(int i=0;i<pages;i++) 
{ 
int c=0; 
int page=p[i]; 
for(int i=0;i<frames;i++) 
{ 
if(page==f[i]) 
{ 
c=1; 
break; 
} 
} 
if(c==0) 
{ 
f[ind]=page; 
ind=(ind+1)%frames; 
pf++; 
} 
printf("%d\t",page); 
for(int i=0;i<frames;i++) 
{ 
if(f[i]==-1) 
printf(" - "); 
else 
printf(" %d ",f[i]); 
} 
printf("\n"); 
} 
}
END

8.2-LRU PAGE REPLACEMENT: 
#include <stdio.h> 
int main() { 
int q[20], p[50], f, n, i, j, c = 0, k = 0, c2[20], replace_index, max; 
printf("Enter number of pages: "); 
scanf("%d", &n); 
printf("Enter the reference string: "); 
for (i = 0; i < n; i++) scanf("%d", &p[i]); 
printf("Enter number of frames: "); 
scanf("%d", &f); 
for (i = 0; i < f; i++) q[i] = -1; 
for (i = 0; i < n; i++) { 
int c1 = 0; 
for (j = 0; j < f; j++) if (p[i] == q[j]) { c1 = 1; break; } 
if (!c1) { 
c++; 
if (k < f) q[k++] = p[i]; 
else { 
for (j = 0; j < f; j++) { 
c2[j] = -1; 
for (int m = i + 1; m < n; m++) { 
if (q[j] == p[m]) { c2[j] = m; break; } 
} 
} 
max = -1; 
for (j = 0; j < f; j++) { 
if (c2[j] == -1 || c2[j] > max) { 
max = c2[j]; 
replace_index = j; 
} 
} 
q[replace_index] = p[i]; 
} 
for (j = 0; j < f; j++) printf("%d ", q[j]); 
printf("\n"); 
} 
} 
printf("\nThe number of page faults is %d\n", c); 
return 0; 
}
END

8.3-OPTIMAL PAGE REPLACEMENT: 
#include <stdio.h> 
int main() { 
int fr[5], page[25], psz, nf, u[5], i, j, k, p = 0, flag, replaceIndex, max; 
printf("Enter number of frames: "); 
scanf("%d", &nf); 
printf("Enter page size: "); 
scanf("%d", &psz); 
printf("Enter page sequence: "); 
for (i = 0; i < psz; i++) scanf("%d", &page[i]); 
for (i = 0; i < nf; i++) fr[i] = -1; 
for (i = 0; i < psz; i++) { 
f
 lag = 0; 
for (j = 0; j < nf; j++) if (page[i] == fr[j]) { flag = 1; break; 
} 
if (!flag) { 
if (p < nf) fr[p++] = page[i]; 
else { 
for (j = 0; j < nf; j++) { 
u[j] = 21; 
for (k = i + 1; k < psz; k++) { 
if (fr[j] == page[k]) { u[j] = k; break; 
} 
} 
} 
max = -1; 
for (j = 0; j < nf; j++) { 
if (u[j] == 21 || u[j] > max) { 
max = u[j]; 
replaceIndex = j; 
} 
} 
fr[replaceIndex] = page[i]; 
} 
printf("Page fault: "); 
} else { 
printf("Page hit: "); 
} 
for (j = 0; j < nf; j++) printf("%d ", fr[j]); 
printf("\n"); 
} 
return 0; 
}
END
EX.NO: 9-IMPLEMENTATION OF DISK SCHEDULING ALGORITHMS: 
9.1 FCFS SCHEDULING ALGORITHM: 
#include<stdio.h> 
#include<stdlib.h> 
int main() 
{ 
int RQ[100],i,n,TotalHeadMoment=0,initial; 
printf("Enter the Number of Requests: "); 
scanf("%d",&n); 
printf("Enter the Requests Sequence: "); 
for(i=0;i<n;i++) 
scanf("%d",&RQ[i]); 
printf("Enter initial head Position: "); 
scanf("%d",&initial); 
for(i=0;i<n;i++) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
printf("Total Head Moment is: %d",TotalHeadMoment); 
return 0; 
}
END

9.2 SSTF (SHORTEST SEEK TIME FIRST) ALGORITHM: 
#include<stdio.h> 
#include<stdlib.h> 
int main() 
{ 
int RQ[100],i,n,TotalHeadMoment=0,initial,count=0; 
printf("Enter the number of Requests\n"); 
scanf("%d",&n); 
printf("Enter the Requests sequence\n"); 
for(i=0;i<n;i++) 
scanf("%d",&RQ[i]); 
printf("Enter initial head position\n"); 
scanf("%d",&initial); 
while(count!=n) 
{ 
int min=1000,d,index; 
for(i=0;i<n;i++) 
{ 
d=abs(RQ[i]-initial); 
if(min>d) 
{ 
min=d;index=i; 
} 
} 
TotalHeadMoment=TotalHeadMoment+min; 
initial=RQ[index]; 
RQ[index]=1000; 
count++; 
} 
printf("Total head movement is %d",TotalHeadMoment); 
return 0; 
} 
END

9.3 SCAN SCHEDULING ALGORITHM: 
# include<stdio.h> 
#include<stdlib.h> 
int main() 
{ 
int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move; 
printf("Enter the number of Requests\n"); 
scanf("%d",&n); 
printf("Enter the Requests sequence\n"); 
for(i=0;i<n;i++) 
scanf("%d",&RQ[i]); 
printf("Enter initial head position\n"); 
scanf("%d",&initial); 
printf("Enter total disk size\n"); 
scanf("%d",&size); 
printf("Enter the head movement direction for high 1 and for low 0\n"); 
scanf("%d",&move); 
for(i=0;i<n;i++) 
{ 
for(j=0;j<n-i-1;j++) 
{ 
if(RQ[j]>RQ[j+1]) 
{ 
int temp; 
temp=RQ[j]; 
RQ[j]=RQ[j+1]; 
RQ[j+1]=temp; 
} 
} 
} 
int index; 
for(i=0;i<n;i++) 
{if(initial<RQ[i]) 
{ 
index=i; 
break; 
} 
} 
if(move==1) 
{ 
for(i=index;i<n;i++) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1); 
initial = size-1; 
for(i=index-1;i>=0;i--) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
} 
else 
{ 
for(i=index-1;i>=0;i--) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0); 
initial =0; 
for(i=index;i<n;i++) 
{ 
TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial); 
initial=RQ[i]; 
} 
} 
printf("Total head movement is %d",TotalHeadMoment); 
return 0; 
}
END

9.4 C-SCAN SCHEDULING ALGORITHM: 
#include <stdio.h> 
#include <stdlib.h> 
int main() { 
int RQ[100], n, initial, size, move, TotalHeadMoment = 0, index; 
printf("Enter number of Requests, Requests, initial head position, disk size, and movement 
direction (1 for high, 0 for low): "); 
scanf("%d", &n); 
for (int i = 0; i < n; i++) scanf("%d", &RQ[i]); 
scanf("%d%d%d", &initial, &size, &move); 
for (int i = 0; i < n - 1; i++) 
for (int j = 0; j < n - i - 1; j++) 
if (RQ[j] > RQ[j + 1]) { int temp = RQ[j]; RQ[j] = RQ[j + 1]; RQ[j + 1] = temp; } 
for (index = 0; index < n && initial >= RQ[index]; index++); 
if (move) { 
for (int i = index; i < n; i++) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
TotalHeadMoment += abs(size - 1 - RQ[n - 1]) + abs(size - 1); 
initial = 0; 
for (int i = 0; i < index; i++) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
} else { 
for (int i = index - 1; i >= 0; i--) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
TotalHeadMoment += abs(RQ[0] - 0) + abs(size - 1); 
initial = size - 1; 
for (int i = n - 1; i >= index; i--) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
} 
printf("Total head movement: %d\n", TotalHeadMoment); 
return 0; 
} 
END

9.5-LOOK DISK SCHEDULING ALGORITHM: 
#include <stdio.h> 
#include <stdlib.h> 
int main() { 
int RQ[100], n, initial, size, move, TotalHeadMoment = 0, index; 
printf("Enter number of Requests, Requests, initial head position, disk size, and movement 
direction (1 for high, 0 for low): "); 
scanf("%d", &n); 
for (int i = 0; i < n; i++) scanf("%d", &RQ[i]); 
scanf("%d%d%d", &initial, &size, &move); 
for (int i = 0; i < n - 1; i++) 
for (int j = 0; j < n - i - 1; j++) 
if (RQ[j] > RQ[j + 1]) { int temp = RQ[j]; RQ[j] = RQ[j + 1]; RQ[j + 1] = temp; } 
for (index = 0; index < n && initial >= RQ[index]; index++); 
if (move) {for (int i = index; i < n; i++) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
TotalHeadMoment += abs(size - 1 - RQ[n - 1]) + abs(size - 1); 
initial = 0; 
for (int i = 0; i < index; i++) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
} else { 
for (int i = index - 1; i >= 0; i--) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
TotalHeadMoment += abs(RQ[0] - 0) + abs(size - 1); 
initial = size - 1; 
for (int i = n - 1; i >= index; i--) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
} 
printf("Total head movement: %d\n", TotalHeadMoment); 
return 0; 
} 
END

9.6 C-LOOK DISK SCHEDULING ALGORITHM: 
#include <stdio.h> 
#include <stdlib.h> 
#include <math.h> 
int compare(const void *a, const void *b) { 
return (*(int *)a - *(int *)b); 
} 
int main() { 
int RQ[100], n, TotalHeadMoment = 0, initial, size, move, index; 
printf("Enter number of Requests: "); 
scanf("%d", &n); 
printf("Enter Requests: "); 
for (int i = 0; i < n; i++) scanf("%d", &RQ[i]); 
printf("Enter initial head position and disk size: "); 
scanf("%d%d", &initial, &size); 
printf("Enter movement direction (1 for high, 0 for low): "); 
scanf("%d", &move); 
qsort(RQ, n, sizeof(int), compare); 
for (index = 0; index < n && RQ[index] <= initial; index++); 
if (move) { 
for (int i = index; i < n; i++) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
TotalHeadMoment += abs(RQ[0] - initial); 
initial = RQ[0]; 
for (int i = 1; i < index; i++) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
} else { 
for (int i = index - 1; i >= 0; i--) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
TotalHeadMoment += abs(RQ[n - 1] - initial); 
initial = RQ[n - 1]; 
for (int i = n - 2; i >= index; i--) TotalHeadMoment += abs(RQ[i] - initial), initial = RQ[i]; 
} 
printf("Total head movement is %d\n", TotalHeadMoment); 
return 0; 
}
END

EX.NO: 10-IMPLEMENTATION OF FILE ORGANIZATION TECHNIQUES: 
10.1 CONTIGUOUS (SEQUENTIAL) FILE ALLOCATION ALGORITHM: 
#include<stdio.h> 
int main() 
{ 
int n,i,j,b[20],sb[20],t[20],x,c[20][20]; 
printf("Enter No of Files: "); 
scanf("%d",&n); 
for(i=0;i<n;i++) 
{ 
printf("Enter No of Blocks Occupied by File %d: ",i+1); 
scanf("%d",&b[i]); 
printf("Enter the Starting Block of File %d: ",i+1); 
scanf("%d",&sb[i]); 
t[i]=sb[i]; 
for(j=0;j<b[i];j++) 
c[i][j]=sb[i]++; 
} 
printf("Filename\tStartblock\tLength\n"); 
for(i=0;i<n;i++) 
printf("%d\t%d\t%d\n",i+1,t[i],b[i]); 
printf("Enter File Name: "); 
scanf("%d",&x); 
printf("File Name is: %d\n",x); 
printf("Length is: %d\n",b[x-1]); 
printf("Blocks Occupied: "); 
for(i=0;i<b[x-1];i++) 
printf("%d ",c[x-1][i]); 
} 
END

10.2 LINKED FILE ALLOCATION ALGORITHM: 
#include<stdio.h> 
struct file 
{ 
char fname[10]; 
int start,size,block[10]; 
}f[10]; 
int main() 
{ 
int i,j,n; 
printf("Enter No of Files:"); 
scanf("%d",&n); 
for(i=0;i<n;i++) 
{ 
printf("Enter File Name: ");scanf("%s",&f[i].fname); 
printf("Enter Starting Block: "); 
scanf("%d",&f[i].start); 
f[i].block[0]=f[i].start; 
printf("Enter No of Blocks: "); 
scanf("%d",&f[i].size); 
printf("Enter Block Numbers: "); 
for(j=1;j<=f[i].size;j++) 
{ 
scanf("%d",&f[i].block[j]); 
} 
} 
printf("File\tstart\tsize\tblock\n"); 
for(i=0;i<n;i++) 
{ 
printf("%s\t%d\t%d\t",f[i].fname,f[i].start,f[i].size); 
for(j=1;j<=f[i].size-1;j++) 
printf("%d--->",f[i].block[j]); 
printf("%d",f[i].block[j]); 
printf("\n"); 
} 
}
END

10.3 INDEXED FILE ALLOCATION ALGORITHM: 
#include<stdio.h> 
int main() 
{ 
int n,m[20],i,j,sb[20],s[20],b[20][20],x; 
printf("Enter No of Files: "); 
scanf("%d",&n); 
for(i=0;i<n;i++) 
{ printf("Enter Starting Block and Size of File %d: ",i+1); 
scanf("%d%d",&sb[i],&s[i]); 
printf("Enter Blocks Occupied by File %d: ",i+1); 
scanf("%d",&m[i]); 
printf("Enter blocks of File %d: ",i+1); 
for(j=0;j<m[i];j++) 
scanf("%d",&b[i][j]); 
} printf("\nFile\tIndex\tLength\n"); 
for(i=0;i<n;i++) 
{ 
printf("%d\t%d\t%d\n",i+1,sb[i],m[i]); 
}printf("\nEnter File Number: "); 
scanf("%d",&x); 
printf("File Number is: %d\n",x);i=x-1; 
if(x>n) 
{ 
printf("Out of Bound"); 
return 0; 
} 
printf("Index is :%d\n",sb[i]); 
printf("Block occupied are: "); 
for(j=0;j<m[i];j++) 
printf("%d ",b[i][j]); 
} 
END